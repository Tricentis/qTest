{{- if and .Values.secrets.enabled (not .Values.secrets.existingConfigs) }}
apiVersion: v1
data:
  client.jdbc.postgres.password: "{{ .Values.qTestManager.client.jdbc.postgresPassword| b64enc}}" 
  client.jdbc.postgres.readonly.password: "{{ .Values.qTestManager.client.jdbc.postgresReadOnlyPassword| b64enc}}" 
  mail.password: "{{ .Values.qTestManager.mail.password}}"
kind: Secret
metadata:
  name: qtest-manager-secret
  namespace: {{ .Values.namespace.name }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
type: Opaque
{{- end }}
{{- if and .Values.imageCredentials.enabled (not .Values.imageCredentials.existingImageCredentials) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.imageCredentials.name }}
  namespace: {{ .Values.namespace.name }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ template "imagePullSecret" . }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.imageCredentials.name }}-liquibase
  namespace: {{ .Values.namespace.name }}
  {{- with .Values.liquibase.configmapAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ template "imagePullSecret" . }}
{{- end }}
{{- if .Values.qTestManager.client.jdbc.sslEnable }}
---
apiVersion: v1
kind: Secret
metadata:
  name: qtest-db-root-secret
  namespace: {{ .Values.namespace.name }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
type: Opaque
data:
  root.crt: "{{ .Values.qTestManager.client.jdbc.cert }}"
{{- end }}
{{- if and .Values.qTestManager.serverAppSSLRequired (not .Values.secrets.useExistingTls) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: qtest-ssl-root-secret
  namespace: {{ .Values.namespace.name }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVIekNDQXdlZ0F3SUJBZ0lVWUdrV0FGTmRGY2FoQkhvakxpSXdSVU1ndUNzd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1lERUxNQWtHQTFVRUJoTUNWVk14RURBT0JnTlZCQWdUQjBkbGIzSm5hV0V4RURBT0JnTlZCQWNUQjBGMApiR0Z1ZEdFeEZ6QVZCZ05WQkFvVERsRkJVM2x0Y0dodmJua2dURXhETVJRd0VnWURWUVFERXd0eGRHVnpkQzVzCmIyTmhiREFlRncweU1qQTJNRFV4TVRJd05UVmFGdzB5TXpBMk1EVXhNVEl3TlRWYU1HQXhDekFKQmdOVkJBWVQKQWxWVE1SQXdEZ1lEVlFRSUV3ZEhaVzl5WjJsaE1SQXdEZ1lEVlFRSEV3ZEJkR3hoYm5SaE1SY3dGUVlEVlFRSwpFdzVSUVZONWJYQm9iMjU1SUV4TVF6RVVNQklHQTFVRUF4TUxjWFJsYzNRdWJHOWpZV3d3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURVK2lOd1dybW5VZWJLU09FYkY1ak8zZ3BlZHdiK29raHEKdCtKUHo5MjZtQ1NSNlBTVUVZQy9IYWJXWExENlU5UFhUQk9mT2taYXBRUXNaaC9HU0lMNXZTbGdSZ29DK0p5VAoyOVhuTi9WQy90RG5NaDFYd3piTXZDZkdmVFp5NUlqWVlub2V6ZGNsdFk1RkFNYlFxMUxEWEFPUnJKSmZPTGZ6CnVEeEQ2Zi8zNk5GMXVDUDM1RktyUXBKdXlFR3B5YlZ5OWZjOG9JQWNGV3k2elhKbXpCdnZjcEtCOStEQTFXa0sKTWgyU2VuMXJIcW9PM0JZaythSTQ5RE5jQ09sZkZUMldDN1hzR0xJc2U3TzJ0Y2xER3htTVp3WmVvY0ovRzF1Vwo3Z1U2TEVTalVsY0RKTzBFaHp3OHVHR2RHQUdsV1VHKzAxU09ZdW5mSU94bUlUdVZBczdYQWdNQkFBR2pnZEF3CmdjMHdIUVlEVlIwT0JCWUVGRzUvUHZXeExoOW8zcmFwRXZ4ekREN054ZXhnTUlHZEJnTlZIU01FZ1pVd2daS0EKRkc1L1B2V3hMaDlvM3JhcEV2eHpERDdOeGV4Z29XU2tZakJnTVFzd0NRWURWUVFHRXdKVlV6RVFNQTRHQTFVRQpDQk1IUjJWdmNtZHBZVEVRTUE0R0ExVUVCeE1IUVhSc1lXNTBZVEVYTUJVR0ExVUVDaE1PVVVGVGVXMXdhRzl1CmVTQk1URU14RkRBU0JnTlZCQU1UQzNGMFpYTjBMbXh2WTJGc2doUmdhUllBVTEwVnhxRUVlaU11SWpCRlF5QzQKS3pBTUJnTlZIUk1FQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUE5M3h4Tk5sNVVTejVWS1I5agprcG9MSGtyUCtBOStoM0JxZHBqV29YTkxYL29XZmZWTllvNUpIYTJMU1NPR0JSQWw2OVh6cWVlZzRmV3puTEpVCno0bkdLWkl1aStZTlVENDhLYjNpbzZURlFFNjJOaWV1UVJlYkMrUUZhZlQxY1VJeHFRcXJZSXA5STNwbCtGSWcKUU1OSVNPKzhidksyOWxmR2huUmxjWE5xcFdxMHhYN1RkWlhQaUtzMEpEaGNJL0JOZCt3WW82bC9ISkJzY21MZAppL3RGS0I1SnRPSWhmdFN2WW5XakQ5akZFRVRlMERidDBNMG5hdk5KRnNnbVVuVzBqNG5SQk5lR1k2c095dC9MCmxhSW9Ka3NGVHgyQTBMU0VGTlVKVE5ya2doblAyblJhK0c3L0NrQ1FRakltTlMyOU1ET3JhWjM5dndzR1h5SHgKWCtOcQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRFUraU53V3JtblVlYksKU09FYkY1ak8zZ3BlZHdiK29raHF0K0pQejkyNm1DU1I2UFNVRVlDL0hhYldYTEQ2VTlQWFRCT2ZPa1phcFFRcwpaaC9HU0lMNXZTbGdSZ29DK0p5VDI5WG5OL1ZDL3REbk1oMVh3emJNdkNmR2ZUWnk1SWpZWW5vZXpkY2x0WTVGCkFNYlFxMUxEWEFPUnJKSmZPTGZ6dUR4RDZmLzM2TkYxdUNQMzVGS3JRcEp1eUVHcHliVnk5ZmM4b0lBY0ZXeTYKelhKbXpCdnZjcEtCOStEQTFXa0tNaDJTZW4xckhxb08zQllrK2FJNDlETmNDT2xmRlQyV0M3WHNHTElzZTdPMgp0Y2xER3htTVp3WmVvY0ovRzF1VzdnVTZMRVNqVWxjREpPMEVoenc4dUdHZEdBR2xXVUcrMDFTT1l1bmZJT3htCklUdVZBczdYQWdNQkFBRUNnZ0VBVFErSS9TRkdwWjBEMWRPUzU3dWRCZFRmaVppbHhrS3YwelZmeEtNZ3htQkEKY3k4SU4vOHhSM1dTSldQNmdVa05rSXd0V1dLN2pCYkRNTkZ1MDg3dTNUQXRwWEVTTkVzQ1ZKbXBodlQvWUZOVgpBU0puN1pacjRKNkFBZGpTZDdYck1laEg2WmR2TG16SDRuM0tjanhiUU9hdFArdGlOdVFONHppWlRiV0FjWkY1CjB5dklXa2ZzMktBVk5NRmxUZU5xTVVtMndMNWE1dDRwTWJYeUxVVWlZNGtwOC9xTm9vM3EzRUZ3WUIxbzF6QUQKd1NMK3p2M09vVXZMRlcwSVUrYzNhb3ZtN1ZJcEdkWGcrYzVyc1NQNmRtMUdHbVBuNWVNSHBZZW43UU1GS2J0RwphZkRjVEV0Zzl4NEkzWmUzWFd3NjZxM2ZvZkI1b1c3bWtKbG12VHRQeVFLQmdRRDRmTDhIVEtCZEVqeDhDSzBFClNPQWJBWDBQb1V0UDBVcExiT1RLZDh2b1hOb1RsNW1GeWV2NHkvbWNJRVFmWVhEMW5oK1I5SHZtQ3ZabndDS3UKVjlBWGlUc1NkWGRpVFE1QllCd3FPZit5YkhNZE96cG1JdFRoWXl4bjBydTFUSS95K09HZndjS3lGMEZVVXV6TApKK0xlSFAyMytLUVNFUXJUREt2enhxcm1Hd0tCZ1FEYmFveDllVlVCSjNFNSs4TDVFaGg5Q2U1Y3VaL2dxUUhvCk9uOGJaRmp2ZjRON1gzbS9sSExTSmVKREkwYXJYMHBmcGhkK0xTTklER2wzM1NYUE83NFJqU3hYN0VyUDBEejAKUDBRaWplakpLQ09KTUd4Z3NSa3hzOXNJc2lzbTdNaUs5Tnpic3M5SFUzUjdrbzhWdnJvc0VUejZUaFQvY3JTSgpwd1BwRm9NMTlRS0JnQmRSYllPNzF4aWt5M1JBUkN3d3dvY0dQcndtd0xCK3pXQUNtZjI5L0M2VCtBcjZvUGVECkdWZkJuR3pnUWtSSG1wZ1IvSmh2dnVpNWdxSDl6OE5ZamppSE1qbnJPQWJMZ0ZqMk1lNXNmdWc1Y1J2L0lOM1EKeXZWVG55a25CMkplQ3V3Y0d1QXBDS0k1dUhHM1RtMUtFdW9SQW1Zdk9RWlEveGtMQ1YvWTl0U2RBb0dCQUpCeAo3RnNON1MvOVQwVGt3TTVIWTJldGlnWHhEWmRRcTdpK0NiOTJxRFhDdEVRYjdvSjRyNzQ0d21PQWJaMlQ5ZHBSCjlWVlRVYzYwblJvVHREaGhGQmRwNEs5aEZ6OEh6NWpiclhjeUJQV29QdnlwckM5YlowS1pMTERrMmhPZC9jZTgKdTBqR3hqNG1hcUNQTXpNVmhHcE9UdDVaV09seUVmZ3N3eDVIZThtaEFvR0FZaXl3SVBBS0c3Zk5jcGx2ZjJQegpBaGkyOVM0V3RUa1dKNDVCS1Q4bXZaSVNiRG0xbWhKWHkxNWVsKzNZa1FUKzhGampwM1N2R1d5MXNGMFc0bi85Cmw3dGJlL0VOQlV0Z0hjdld2OVdHZkhpaFFhWW1helJzTDd3SFBiVnRYTnJzS2txRHdSckxkUkdVd05rZE9XVC8KUFB4T3plTzRSdHRzMUVDWUVuWXYrbkk9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K"
{{- end }}
