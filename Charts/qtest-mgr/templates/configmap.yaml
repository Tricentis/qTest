{{- $postgresUrl := .Values.qTestManager.client.jdbc.postgresUrl -}}
{{- $postgresReadUrl := .Values.qTestManager.client.jdbc.postgresReadOnlyUrl -}}
{{- if .Values.qTestManager.client.jdbc.sslEnable }}
{{- $postgresUrl = printf "%s%s" .Values.qTestManager.client.jdbc.postgresUrl .Values.qTestManager.client.jdbc.sslPath -}}
{{- $postgresReadUrl = printf "%s%s" .Values.qTestManager.client.jdbc.postgresReadOnlyUrl .Values.qTestManager.client.jdbc.sslPath -}}
{{- end -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: qtest-liquibase-config
  namespace: {{ .Values.namespace.name }}
  labels:
    app: qtest-mgr
  {{- with .Values.liquibase.configmapAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
  client.jdbc.postgres.url: {{ $postgresUrl }}
  client.jdbc.postgres.username: "{{ .Values.qTestManager.client.jdbc.postgresUserName }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: qtest-manager-config
  namespace: {{ .Values.namespace.name }}
  labels:
    app: qtest-mgr
data:
  client.jdbc.postgres.url: "{{ $postgresUrl }}"
  client.jdbc.postgres.username: "{{ .Values.qTestManager.client.jdbc.postgresUserName }}"
  client.jdbc.postgres.readonly.url: "{{ $postgresReadUrl }}"
  client.jdbc.postgres.readonly.username: "{{ .Values.qTestManager.client.jdbc.postgresReadOnlyUserName }}"
  elasticsearch.init: "{{ .Values.qTestManager.elasticSearch.init }}"
  elasticsearch.disable: "{{ .Values.qTestManager.elasticSearch.disable }}"
  elasticsearch.scheme: "{{ .Values.qTestManager.elasticSearch.scheme }}"
  elasticsearch.host: "{{ .Values.qTestManager.elasticSearch.host }}"
  elasticsearch.port: "{{ .Values.qTestManager.elasticSearch.port }}"
  attachment.folder.path: "{{ .Values.qTestManager.attachmentFolderPath }}"
  license.folder.path: "{{ .Values.qTestManager.licenseFolderPath }}"
  elasticsearch.permitted_clients: "{{ .Values.qTestManager.elasticSearch.permittedClients }}"
  blobStorage.region: "{{ .Values.qTestManager.blobStorage.region }}"
  blobStorage.sharedBucket: "{{ .Values.qTestManager.blobStorage.sharedBucket }}"
  s3.folder: "{{ .Values.qTestManager.s3.folder }}"
  s3.scan.url: "{{ .Values.qTestManager.s3.scanUrl }}"
  serverapp.useSecureCookie: "{{ .Values.qTestManager.serverAppUseSecureCookie }}"
  serverapp.ssl.required: "{{ .Values.qTestManager.serverAppSSLRequired }}"
  serverapp.ssl.redirect.custom.status.enabled: "{{ .Values.qTestManager.serverAppSSLRequired }}"
  preUrl: "{{ .Values.qTestManager.preUrl }}"
  preUrl.https: "{{ .Values.qTestManager.preUrlHttps }}"
  qasymphonyUrlPostfix: "{{ .Values.qTestManager.qasymphonyUrlPostfix }}"
  qas.directory.address: "{{ .Values.qTestManager.qasDirectoryAddress }}"
  qTest.instance: "{{ .Values.qTestManager.qTest.instance }}"
  kafka.bootstrapAddress: "{{ .Values.qTestManager.kafka.bootstrapAddress }}"
  kafka.schemaRegistryUrl: "{{ .Values.qTestManager.kafka.schemaRegistryUrl }}"
  qtest.kafka.enable: "{{ .Values.qTestManager.kafka.enable }}"
  pre.session.url: "{{ .Values.qTestManager.preSessionUrl }}"
  pulse.url.base: "{{ .Values.qTestManager.pulseUrlBase }}"
  insights.url: "{{ .Values.qTestManager.insightsUrl }}"
  launch.url.base: "{{ .Values.qTestManager.launchUrlBase }}"
  notification.url.external: "{{ .Values.qTestManager.notification.urlExternal }}"
  qtest.servermap.url: "{{ .Values.qTestManager.qTest.serverMapUrl }}"
  tdm.setting.url: "{{ .Values.qTestManager.tdmSettingUrl }}"
  mail.host: "{{ .Values.qTestManager.mail.host }}"
  mail.port: "{{ .Values.qTestManager.mail.port }}"
  mail.username: "{{ .Values.qTestManager.mail.userName }}"
  supportEmailAddress: "{{ .Values.qTestManager.mail.supportEmailAddress }}"
  integration.jira.testConnection.legacyEndpoint.clients: "{{ .Values.qTestManager.integration.jira.testConnectionLegacyEndpointClients }}"
  qtest.od.private: "{{ .Values.qTestManager.qTest.ODPrivate }}"
  secret.volume.mount.path: "{{ .Values.qTestManager.secret.appVolumeMount }}"
  client.dbcp.maxActive: "{{ .Values.qTestManager.client.dbcp.maxActive }}"
  {{ if .Values.testconductor.environment.isOnPremise }} 
  async.thread.number: "{{ .Values.qTestManager.async.threadNo }}"
  async.max.cpu: "{{ .Values.qTestManager.async.maxCpu }}"
  async.max.database.cpu: "{{ .Values.qTestManager.async.databaseCpu }}"
  action.task.executor.poolSize: "{{ .Values.qTestManager.action.task.executor.poolSize }}"  
  blobStorage.type: "{{ .Values.qTestManager.blobStorage.type }}"
  s3.accessKey: "{{ .Values.qTestManager.s3.accessKey }}"
  s3.secretKey: "{{ .Values.qTestManager.s3.secretKey }}"
  qtest.request.nonce.disabled: "{{ .Values.qTestManager.qTest.request.nonce.disabled }}"
  qtest.request.nonce.mode: "{{ .Values.qTestManager.qTest.request.nonce.mode }}"
  security.csrf.source.trust.pattern: "{{ .Values.qTestManager.security.csrf.source.trust.pattern }}"
  cors.allowed.all: "{{ .Values.qTestManager.cors.allowed.all }}"
  cors.allowed.domains: "{{ .Values.qTestManager.cors.allowed.domains }}"
  vera.auto.testrun.beta.clients: "{{ .Values.qTestManager.vera.auto.testrun.beta.clients }}"
  {{ end }}
---
{{ if not .Values.testconductor.environment.singleInstance }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: qtest-manager-notification-config
  namespace: {{ .Values.namespace.name }}
  labels:
    app: qtest-mgr
data:
  client.jdbc.postgres.url: "{{ $postgresUrl }}"
  client.jdbc.postgres.username: "{{ .Values.qTestManager.client.jdbc.postgresUserName }}"
  client.jdbc.postgres.readonly.url: "{{ $postgresReadUrl }}"
  client.jdbc.postgres.readonly.username: "{{ .Values.qTestManager.client.jdbc.postgresReadOnlyUserName }}"
  elasticsearch.init: "{{ .Values.qTestManager.elasticSearch.init }}"
  elasticsearch.disable: "{{ .Values.qTestManager.elasticSearch.disable }}"
  elasticsearch.scheme: "{{ .Values.qTestManager.elasticSearch.scheme }}"
  elasticsearch.host: "{{ .Values.qTestManager.elasticSearch.host }}"
  elasticsearch.port: "{{ .Values.qTestManager.elasticSearch.port }}"
  attachment.folder.path: "{{ .Values.qTestManager.attachmentFolderPath }}"
  elasticsearch.permitted_clients: "{{ .Values.qTestManager.elasticSearch.permittedClients }}"
  blobStorage.region: "{{ .Values.qTestManager.blobStorage.region }}"
  blobStorage.sharedBucket: "{{ .Values.qTestManager.blobStorage.sharedBucket }}"
  s3.folder: "{{ .Values.qTestManager.s3.folder }}"
  s3.scan.url: "{{ .Values.qTestManager.s3.scanUrl }}"
  serverapp.useSecureCookie: "{{ .Values.qTestManager.serverAppUseSecureCookie }}"
  serverapp.ssl.required: "{{ .Values.qTestManager.serverAppSSLRequired }}"
  serverapp.ssl.redirect.custom.status.enabled: "{{ .Values.qTestManager.serverAppSSLRequired }}"
  preUrl: "{{ .Values.qTestManager.preUrl }}"
  preUrl.https: "{{ .Values.qTestManager.preUrlHttps }}"
  qasymphonyUrlPostfix: "{{ .Values.qTestManager.qasymphonyUrlPostfix }}"
  qas.directory.address: "{{ .Values.qTestManager.qasDirectoryAddress }}"
  qTest.instance: "{{ .Values.qTestManager.qTest.instance }}"
  kafka.bootstrapAddress: "{{ .Values.qTestManager.kafka.bootstrapAddress }}"
  kafka.schemaRegistryUrl: "{{ .Values.qTestManager.kafka.schemaRegistryUrl }}"
  qtest.kafka.enable: "{{ .Values.qTestManager.kafka.enable }}"
  pre.session.url: "{{ .Values.qTestManager.preSessionUrl }}"
  pulse.url.base: "{{ .Values.qTestManager.pulseUrlBase }}"
  insights.url: "{{ .Values.qTestManager.insightsUrl }}"
  launch.url.base: "{{ .Values.qTestManager.launchUrlBase }}"
  notification.url.external: "{{ .Values.qTestManager.notification.urlExternal }}"
  qtest.servermap.url: "{{ .Values.qTestManager.qTest.serverMapUrl }}"
  tdm.setting.url: "{{ .Values.qTestManager.tdmSettingUrl }}"
  mail.host: "{{ .Values.qTestManager.mail.host }}"
  mail.port: "{{ .Values.qTestManager.mail.port }}"
  mail.username: "{{ .Values.qTestManager.mail.userName }}"
  supportEmailAddress: "{{ .Values.qTestManager.mail.supportEmailAddress }}"
  integration.jira.testConnection.legacyEndpoint.clients: "{{ .Values.qTestManager.integration.jira.testConnectionLegacyEndpointClients }}"
  qtest.od.private: "{{ .Values.qTestManager.qTest.ODPrivate }}"
  com.qasymphony.qtest.event.service.ToscaQueueEventProcessingService.MAX_DEQUEUE: "{{ .Values.qTestManager.notification.ToscaQueueEventProcessingServiceMaxDequeue }}"
  action.task.executor.poolSize: "{{ .Values.qTestManager.notification.actionTaskExecutorPoolSize }}"
  spring.profiles.active: "{{ .Values.qTestManager.notification.springProfilesActive }}"
  secret.volume.mount.path: "{{ .Values.qTestManager.secret.appVolumeMount }}"
  client.dbcp.maxActive: "{{ .Values.qTestManager.client.dbcp.maxActive }}"
{{- end -}}